// This file was automatically generated by the NPoco T4 Template
// Do not make changes dNewstly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `DolphinCon`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=.\SQLEXPRESS; User ID =sa; password=**zapped**;`
//     Schema:                 ``
//     Include Views:          `True`

using System;
using System.Collections.Generic;
using System.Linq;
using NPoco;

namespace DolphinContext.Data.Models
{
	public partial class DolphinDb : Database
	{
		public DolphinDb() : base("DolphinCon")
		{
			CommonConstruct();
		}

		public DolphinDb(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		public virtual void CommonConstruct()
		{
		    Factory = new DefaultFactory();
		}
		
		public interface IFactory
		{
			DolphinDb GetInstance();
		    void BeginTransaction(DolphinDb database);
		    void CompleteTransaction(DolphinDb database);
		}

        public class DefaultFactory : IFactory
        {
            [ThreadStatic]
            static Stack<DolphinDb> _stack = new Stack<DolphinDb>();

            public DolphinDb GetInstance()
            {
               
			    if (_stack == null)
                { return new  DolphinDb(); }
                else { 
					return _stack.Count > 0 ? _stack.Peek() : new DolphinDb();
                }
			   
			    
            }

            public void BeginTransaction(DolphinDb database)
            {

			 if (_stack == null)
				 {
				  _stack = new  Stack<DolphinDb>();
				 }
                _stack.Push(database);
            }

            public void CompleteTransaction(DolphinDb database)
            {
			 if (_stack == null)
				 {
				  _stack = new Stack <DolphinDb>();
				 }
                _stack.Pop();
            }
        }
		
		public static IFactory Factory { get; set; }

        public static DolphinDb GetInstance()
        {
		 if (Factory == null)
                return new DolphinDb();
			return Factory.GetInstance();
        }

		protected override void OnBeginTransaction()
		{
            Factory.BeginTransaction(this);
		}

        protected override void OnCompleteTransaction()
		{
            Factory.CompleteTransaction(this);
		}
		public class Record<T> where T:new()
		{
			public bool IsNew(Database db) { return db.IsNew(this); }
			public object Insert(Database db) { return db.Insert(this); }  
			
			public int Update(Database db, IEnumerable<string> columns) { return db.Update(this, columns); }
			public static int Update(Database db, string sql, params object[] args) { return db.Update<T>(sql, args); }
			public static int Update(Database db, Sql sql) { return db.Update<T>(sql); }
			public int Delete(Database db) { return db.Delete(this); }
			public static int Delete(Database db, string sql, params object[] args) { return db.Delete<T>(sql, args); }
			public static int Delete(Database db, Sql sql) { return db.Delete<T>(sql); }
			public static int Delete(Database db, object primaryKey) { return db.Delete<T>(primaryKey); }
			public static bool Exists(Database db, object primaryKey) { return db.Exists<T>(primaryKey); }
			public static T SingleOrDefault(Database db, string sql, params object[] args) { return db.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Database db, Sql sql) { return db.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(Database db, string sql, params object[] args) { return db.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Database db, Sql sql) { return db.FirstOrDefault<T>(sql); }
			public static T Single(Database db, string sql, params object[] args) { return db.Single<T>(sql, args); }
			public static T Single(Database db, Sql sql) { return db.Single<T>(sql); }
			public static T First(Database db, string sql, params object[] args) { return db.First<T>(sql, args); }
			public static T First(Database db, Sql sql) { return db.First<T>(sql); }
			public static List<T> Fetch(Database db, string sql, params object[] args) { return db.Fetch<T>(sql, args); }
			public static List<T> Fetch(Database db, Sql sql) { return db.Fetch<T>(sql); }
			public static List<T> Fetch(Database db, long page, long itemsPerPage, string sql, params object[] args) { return db.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(Database db, long page, long itemsPerPage, Sql sql) { return db.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(Database db, long skip, long take, string sql, params object[] args) { return db.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(Database db, long skip, long take, Sql sql) { return db.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(Database db, long page, long itemsPerPage, string sql, params object[] args) { return db.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(Database db, long page, long itemsPerPage, Sql sql) { return db.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(Database db, string sql, params object[] args) { return db.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Database db, Sql sql) { return db.Query<T>(sql); }			
			
			protected HashSet<string> Tracker = new HashSet<string>();
			private void OnLoaded() { Tracker.Clear(); }
			protected void Track(string c) { if (!Tracker.Contains(c)) Tracker.Add(c); }

			public int Update(Database db) 
			{ 
				if (Tracker.Count == 0)
					return db.Update(this); 

				var retv = db.Update(this, Tracker.ToArray());
				Tracker.Clear();
				return retv;
			}
			public void Save(Database db) 
			{
                if (this.IsNew(db))
					Insert(db);
				else
					Update(db);
			}		
		}	
	}		
		[TableName("dbo.DolIncident")]
		[PrimaryKey("IncidentId")]
		[ExplicitColumns]
		public partial class DolIncident : DolphinDb.Record<DolIncident>  
		{
			[Column("IncidentId")] public int Incidentid 
			{ 
				get { return _Incidentid; }
				set { _Incidentid = value; Track("IncidentId"); }
			}
			int _Incidentid;
			[Column("IncidentRef")] public string Incidentref 
			{ 
				get { return _Incidentref; }
				set { _Incidentref = value; Track("IncidentRef"); }
			}
			string _Incidentref;
			[Column("TerminalId")] public string Terminalid 
			{ 
				get { return _Terminalid; }
				set { _Terminalid = value; Track("TerminalId"); }
			}
			string _Terminalid;
			[Column("UserName")] public string Username 
			{ 
				get { return _Username; }
				set { _Username = value; Track("UserName"); }
			}
			string _Username;
			[Column("IncidentDesc")] public string Incidentdesc 
			{ 
				get { return _Incidentdesc; }
				set { _Incidentdesc = value; Track("IncidentDesc"); }
			}
			string _Incidentdesc;
			[Column("ResponseDateTime")] public DateTime? Responsedatetime 
			{ 
				get { return _Responsedatetime; }
				set { _Responsedatetime = value; Track("ResponseDateTime"); }
			}
			DateTime? _Responsedatetime;
			[Column("IncidentDateTime")] public DateTime? Incidentdatetime 
			{ 
				get { return _Incidentdatetime; }
				set { _Incidentdatetime = value; Track("IncidentDateTime"); }
			}
			DateTime? _Incidentdatetime;
			[Column("IncidentStatus")] public string Incidentstatus 
			{ 
				get { return _Incidentstatus; }
				set { _Incidentstatus = value; Track("IncidentStatus"); }
			}
			string _Incidentstatus;
		
			public static IEnumerable<DolIncident> Query(Database db, string[] columns = null, int[] Incidentid = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.DolIncident (NOLOCK)");

				if (Incidentid != null)
					sql.Where("IncidentId IN (@0)", Incidentid);

                return db.Query<DolIncident>(sql);
            }
		}
		
		[TableName("dbo.DolAssigned")]
		[PrimaryKey("CallId")]
		[ExplicitColumns]
		public partial class DolAssigned : DolphinDb.Record<DolAssigned>  
		{
			[Column("CallId")] public int Callid 
			{ 
				get { return _Callid; }
				set { _Callid = value; Track("CallId"); }
			}
			int _Callid;
			[Column("IncidentRef")] public string Incidentref 
			{ 
				get { return _Incidentref; }
				set { _Incidentref = value; Track("IncidentRef"); }
			}
			string _Incidentref;
			[Column("CallAssigned")] public string Callassigned 
			{ 
				get { return _Callassigned; }
				set { _Callassigned = value; Track("CallAssigned"); }
			}
			string _Callassigned;
			[Column("TerminalId")] public string Terminalid 
			{ 
				get { return _Terminalid; }
				set { _Terminalid = value; Track("TerminalId"); }
			}
			string _Terminalid;
			[Column("EngAssigned")] public string Engassigned 
			{ 
				get { return _Engassigned; }
				set { _Engassigned = value; Track("EngAssigned"); }
			}
			string _Engassigned;
			[Column("EngResolved")] public string Engresolved 
			{ 
				get { return _Engresolved; }
				set { _Engresolved = value; Track("EngResolved"); }
			}
			string _Engresolved;
			[Column("CallStatus")] public string Callstatus 
			{ 
				get { return _Callstatus; }
				set { _Callstatus = value; Track("CallStatus"); }
			}
			string _Callstatus;
			[Column("PartUsed")] public string Partused 
			{ 
				get { return _Partused; }
				set { _Partused = value; Track("PartUsed"); }
			}
			string _Partused;
			[Column("PerformanceMs")] public string Performancems 
			{ 
				get { return _Performancems; }
				set { _Performancems = value; Track("PerformanceMs"); }
			}
			string _Performancems;
			[Column("DateResolved")] public DateTime? Dateresolved 
			{ 
				get { return _Dateresolved; }
				set { _Dateresolved = value; Track("DateResolved"); }
			}
			DateTime? _Dateresolved;
			[Column("TimeResolved")] public DateTime? Timeresolved 
			{ 
				get { return _Timeresolved; }
				set { _Timeresolved = value; Track("TimeResolved"); }
			}
			DateTime? _Timeresolved;
		
			public static IEnumerable<DolAssigned> Query(Database db, string[] columns = null, int[] Callid = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.DolAssigned (NOLOCK)");

				if (Callid != null)
					sql.Where("CallId IN (@0)", Callid);

                return db.Query<DolAssigned>(sql);
            }
		}
		
		[TableName("dbo.DolRole")]
		[PrimaryKey("RoleId")]
		[ExplicitColumns]
		public partial class DolRole : DolphinDb.Record<DolRole>  
		{
			[Column("RoleId")] public int Roleid 
			{ 
				get { return _Roleid; }
				set { _Roleid = value; Track("RoleId"); }
			}
			int _Roleid;
	        [Column] public string Title 
			{ 
				get { return _Title; }
				set { _Title = value; Track("Title"); }
			}
			string _Title;
			[Column("_Desc")] public string Desc 
			{ 
				get { return _Desc; }
				set { _Desc = value; Track("_Desc"); }
			}
			string _Desc;
	        [Column] public bool? Status 
			{ 
				get { return _Status; }
				set { _Status = value; Track("Status"); }
			}
			bool? _Status;
			[Column("IsDelete")] public bool? Isdelete 
			{ 
				get { return _Isdelete; }
				set { _Isdelete = value; Track("IsDelete"); }
			}
			bool? _Isdelete;
		
			public static IEnumerable<DolRole> Query(Database db, string[] columns = null, int[] Roleid = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.DolRole (NOLOCK)");

				if (Roleid != null)
					sql.Where("RoleId IN (@0)", Roleid);

                return db.Query<DolRole>(sql);
            }
		}
		
		[TableName("dbo.DolItem")]
		[PrimaryKey("ItemId")]
		[ExplicitColumns]
		public partial class DolItem : DolphinDb.Record<DolItem>  
		{
			[Column("ItemId")] public int Itemid 
			{ 
				get { return _Itemid; }
				set { _Itemid = value; Track("ItemId"); }
			}
			int _Itemid;
			[Column("ItemName")] public string Itemname 
			{ 
				get { return _Itemname; }
				set { _Itemname = value; Track("ItemName"); }
			}
			string _Itemname;
			[Column("ItemDesc")] public string Itemdesc 
			{ 
				get { return _Itemdesc; }
				set { _Itemdesc = value; Track("ItemDesc"); }
			}
			string _Itemdesc;
			[Column("ItemStatus")] public bool? Itemstatus 
			{ 
				get { return _Itemstatus; }
				set { _Itemstatus = value; Track("ItemStatus"); }
			}
			bool? _Itemstatus;
		
			public static IEnumerable<DolItem> Query(Database db, string[] columns = null, int[] Itemid = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.DolItem (NOLOCK)");

				if (Itemid != null)
					sql.Where("ItemId IN (@0)", Itemid);

                return db.Query<DolItem>(sql);
            }
		}
		
		[TableName("dbo.DolRole_Menu")]
		[PrimaryKey("Id")]
		[ExplicitColumns]
		public partial class DolRoleMenu : DolphinDb.Record<DolRoleMenu>  
		{
	        [Column] public int Id 
			{ 
				get { return _Id; }
				set { _Id = value; Track("Id"); }
			}
			int _Id;
			[Column("RoleId")] public int? Roleid 
			{ 
				get { return _Roleid; }
				set { _Roleid = value; Track("RoleId"); }
			}
			int? _Roleid;
			[Column("MenuId")] public int? Menuid 
			{ 
				get { return _Menuid; }
				set { _Menuid = value; Track("MenuId"); }
			}
			int? _Menuid;
			[Column("MapDesc")] public string Mapdesc 
			{ 
				get { return _Mapdesc; }
				set { _Mapdesc = value; Track("MapDesc"); }
			}
			string _Mapdesc;
		
			public static IEnumerable<DolRoleMenu> Query(Database db, string[] columns = null, int[] Id = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.DolRole_Menu (NOLOCK)");

				if (Id != null)
					sql.Where("Id IN (@0)", Id);

                return db.Query<DolRoleMenu>(sql);
            }
		}
		
		[TableName("dbo.DolBrand")]
		[PrimaryKey("BrandId")]
		[ExplicitColumns]
		public partial class DolBrand : DolphinDb.Record<DolBrand>  
		{
			[Column("BrandId")] public int Brandid 
			{ 
				get { return _Brandid; }
				set { _Brandid = value; Track("BrandId"); }
			}
			int _Brandid;
			[Column("BrandName")] public string Brandname 
			{ 
				get { return _Brandname; }
				set { _Brandname = value; Track("BrandName"); }
			}
			string _Brandname;
			[Column("BrandDesc")] public string Branddesc 
			{ 
				get { return _Branddesc; }
				set { _Branddesc = value; Track("BrandDesc"); }
			}
			string _Branddesc;
		
			public static IEnumerable<DolBrand> Query(Database db, string[] columns = null, int[] Brandid = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.DolBrand (NOLOCK)");

				if (Brandid != null)
					sql.Where("BrandId IN (@0)", Brandid);

                return db.Query<DolBrand>(sql);
            }
		}
		
		[TableName("dbo.AuditTrail")]
		[PrimaryKey("Id")]
		[ExplicitColumns]
		public partial class AuditTrail : DolphinDb.Record<AuditTrail>  
		{
	        [Column] public int Id 
			{ 
				get { return _Id; }
				set { _Id = value; Track("Id"); }
			}
			int _Id;
			[Column("UserName")] public string Username 
			{ 
				get { return _Username; }
				set { _Username = value; Track("UserName"); }
			}
			string _Username;
			[Column("UserActivity")] public string Useractivity 
			{ 
				get { return _Useractivity; }
				set { _Useractivity = value; Track("UserActivity"); }
			}
			string _Useractivity;
	        [Column] public string Comments 
			{ 
				get { return _Comments; }
				set { _Comments = value; Track("Comments"); }
			}
			string _Comments;
			[Column("DateLog")] public DateTime? Datelog 
			{ 
				get { return _Datelog; }
				set { _Datelog = value; Track("DateLog"); }
			}
			DateTime? _Datelog;
			[Column("SystemName")] public string Systemname 
			{ 
				get { return _Systemname; }
				set { _Systemname = value; Track("SystemName"); }
			}
			string _Systemname;
			[Column("SystemIP")] public string Systemip 
			{ 
				get { return _Systemip; }
				set { _Systemip = value; Track("SystemIP"); }
			}
			string _Systemip;
		
			public static IEnumerable<AuditTrail> Query(Database db, string[] columns = null, int[] Id = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.AuditTrail (NOLOCK)");

				if (Id != null)
					sql.Where("Id IN (@0)", Id);

                return db.Query<AuditTrail>(sql);
            }
		}
		
		[TableName("dbo.DolMenu")]
		[PrimaryKey("MenuId")]
		[ExplicitColumns]
		public partial class DolMenu : DolphinDb.Record<DolMenu>  
		{
			[Column("MenuId")] public int Menuid 
			{ 
				get { return _Menuid; }
				set { _Menuid = value; Track("MenuId"); }
			}
			int _Menuid;
			[Column("MenuName")] public string Menuname 
			{ 
				get { return _Menuname; }
				set { _Menuname = value; Track("MenuName"); }
			}
			string _Menuname;
			[Column("MenuURL")] public string Menuurl 
			{ 
				get { return _Menuurl; }
				set { _Menuurl = value; Track("MenuURL"); }
			}
			string _Menuurl;
			[Column("MenuDesc")] public string Menudesc 
			{ 
				get { return _Menudesc; }
				set { _Menudesc = value; Track("MenuDesc"); }
			}
			string _Menudesc;
			[Column("ParentId")] public int? Parentid 
			{ 
				get { return _Parentid; }
				set { _Parentid = value; Track("ParentId"); }
			}
			int? _Parentid;
	        [Column] public int? Sequence 
			{ 
				get { return _Sequence; }
				set { _Sequence = value; Track("Sequence"); }
			}
			int? _Sequence;
			[Column("ExternalURL")] public string Externalurl 
			{ 
				get { return _Externalurl; }
				set { _Externalurl = value; Track("ExternalURL"); }
			}
			string _Externalurl;
			[Column("MenuStatus")] public bool? Menustatus 
			{ 
				get { return _Menustatus; }
				set { _Menustatus = value; Track("MenuStatus"); }
			}
			bool? _Menustatus;
			[Column("LinkIcon")] public string Linkicon 
			{ 
				get { return _Linkicon; }
				set { _Linkicon = value; Track("LinkIcon"); }
			}
			string _Linkicon;
			[Column("IsDelete")] public bool? Isdelete 
			{ 
				get { return _Isdelete; }
				set { _Isdelete = value; Track("IsDelete"); }
			}
			bool? _Isdelete;
		
			public static IEnumerable<DolMenu> Query(Database db, string[] columns = null, int[] Menuid = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.DolMenu (NOLOCK)");

				if (Menuid != null)
					sql.Where("MenuId IN (@0)", Menuid);

                return db.Query<DolMenu>(sql);
            }
		}
		
		[TableName("dbo.DolUser")]
		[PrimaryKey("UserId")]
		[ExplicitColumns]
		public partial class DolUser : DolphinDb.Record<DolUser>  
		{
			[Column("UserId")] public int Userid 
			{ 
				get { return _Userid; }
				set { _Userid = value; Track("UserId"); }
			}
			int _Userid;
			[Column("FirstName")] public string Firstname 
			{ 
				get { return _Firstname; }
				set { _Firstname = value; Track("FirstName"); }
			}
			string _Firstname;
			[Column("MiddleName")] public string Middlename 
			{ 
				get { return _Middlename; }
				set { _Middlename = value; Track("MiddleName"); }
			}
			string _Middlename;
			[Column("LastName")] public string Lastname 
			{ 
				get { return _Lastname; }
				set { _Lastname = value; Track("LastName"); }
			}
			string _Lastname;
			[Column("UserName")] public string Username 
			{ 
				get { return _Username; }
				set { _Username = value; Track("UserName"); }
			}
			string _Username;
	        [Column] public string Password 
			{ 
				get { return _Password; }
				set { _Password = value; Track("Password"); }
			}
			string _Password;
	        [Column] public string Email 
			{ 
				get { return _Email; }
				set { _Email = value; Track("Email"); }
			}
			string _Email;
			[Column("PhoneNo")] public string Phoneno 
			{ 
				get { return _Phoneno; }
				set { _Phoneno = value; Track("PhoneNo"); }
			}
			string _Phoneno;
			[Column("UserImg")] public string Userimg 
			{ 
				get { return _Userimg; }
				set { _Userimg = value; Track("UserImg"); }
			}
			string _Userimg;
			[Column("CompanyId")] public int? Companyid 
			{ 
				get { return _Companyid; }
				set { _Companyid = value; Track("CompanyId"); }
			}
			int? _Companyid;
			[Column("RoleId")] public int? Roleid 
			{ 
				get { return _Roleid; }
				set { _Roleid = value; Track("RoleId"); }
			}
			int? _Roleid;
	        [Column] public bool? Status 
			{ 
				get { return _Status; }
				set { _Status = value; Track("Status"); }
			}
			bool? _Status;
			[Column("CreatedBy")] public string Createdby 
			{ 
				get { return _Createdby; }
				set { _Createdby = value; Track("CreatedBy"); }
			}
			string _Createdby;
			[Column("CreatedOn")] public DateTime? Createdon 
			{ 
				get { return _Createdon; }
				set { _Createdon = value; Track("CreatedOn"); }
			}
			DateTime? _Createdon;
			[Column("ModifiedBy")] public string Modifiedby 
			{ 
				get { return _Modifiedby; }
				set { _Modifiedby = value; Track("ModifiedBy"); }
			}
			string _Modifiedby;
			[Column("ModifiedOn")] public DateTime? Modifiedon 
			{ 
				get { return _Modifiedon; }
				set { _Modifiedon = value; Track("ModifiedOn"); }
			}
			DateTime? _Modifiedon;
			[Column("IsDelete")] public bool? Isdelete 
			{ 
				get { return _Isdelete; }
				set { _Isdelete = value; Track("IsDelete"); }
			}
			bool? _Isdelete;
		
			public static IEnumerable<DolUser> Query(Database db, string[] columns = null, int[] Userid = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.DolUser (NOLOCK)");

				if (Userid != null)
					sql.Where("UserId IN (@0)", Userid);

                return db.Query<DolUser>(sql);
            }
		}
		
		[TableName("dbo.DolCompany")]
		[PrimaryKey("CompanyId")]
		[ExplicitColumns]
		public partial class DolCompany : DolphinDb.Record<DolCompany>  
		{
			[Column("CompanyId")] public int Companyid 
			{ 
				get { return _Companyid; }
				set { _Companyid = value; Track("CompanyId"); }
			}
			int _Companyid;
	        [Column] public string Title 
			{ 
				get { return _Title; }
				set { _Title = value; Track("Title"); }
			}
			string _Title;
	        [Column] public string Alias 
			{ 
				get { return _Alias; }
				set { _Alias = value; Track("Alias"); }
			}
			string _Alias;
	        [Column] public string Banner 
			{ 
				get { return _Banner; }
				set { _Banner = value; Track("Banner"); }
			}
			string _Banner;
			[Column("RespTime")] public string Resptime 
			{ 
				get { return _Resptime; }
				set { _Resptime = value; Track("RespTime"); }
			}
			string _Resptime;
			[Column("RestTime")] public string Resttime 
			{ 
				get { return _Resttime; }
				set { _Resttime = value; Track("RestTime"); }
			}
			string _Resttime;
			[Column("Rest1Time")] public string Rest1time 
			{ 
				get { return _Rest1time; }
				set { _Rest1time = value; Track("Rest1Time"); }
			}
			string _Rest1time;
	        [Column] public bool? Status 
			{ 
				get { return _Status; }
				set { _Status = value; Track("Status"); }
			}
			bool? _Status;
			[Column("IsDelete")] public bool? Isdelete 
			{ 
				get { return _Isdelete; }
				set { _Isdelete = value; Track("IsDelete"); }
			}
			bool? _Isdelete;
			[Column("CreatedBy")] public string Createdby 
			{ 
				get { return _Createdby; }
				set { _Createdby = value; Track("CreatedBy"); }
			}
			string _Createdby;
			[Column("CreatedOn")] public DateTime? Createdon 
			{ 
				get { return _Createdon; }
				set { _Createdon = value; Track("CreatedOn"); }
			}
			DateTime? _Createdon;
		
			public static IEnumerable<DolCompany> Query(Database db, string[] columns = null, int[] Companyid = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.DolCompany (NOLOCK)");

				if (Companyid != null)
					sql.Where("CompanyId IN (@0)", Companyid);

                return db.Query<DolCompany>(sql);
            }
		}
		
		[TableName("dbo.DolRegion")]
		[PrimaryKey("RegId")]
		[ExplicitColumns]
		public partial class DolRegion : DolphinDb.Record<DolRegion>  
		{
			[Column("RegId")] public int Regid 
			{ 
				get { return _Regid; }
				set { _Regid = value; Track("RegId"); }
			}
			int _Regid;
			[Column("RegionName")] public string Regionname 
			{ 
				get { return _Regionname; }
				set { _Regionname = value; Track("RegionName"); }
			}
			string _Regionname;
		
			public static IEnumerable<DolRegion> Query(Database db, string[] columns = null, int[] Regid = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.DolRegion (NOLOCK)");

				if (Regid != null)
					sql.Where("RegId IN (@0)", Regid);

                return db.Query<DolRegion>(sql);
            }
		}
		
		[TableName("dbo.DolState")]
		[PrimaryKey("Sid")]
		[ExplicitColumns]
		public partial class DolState : DolphinDb.Record<DolState>  
		{
	        [Column] public int Sid 
			{ 
				get { return _Sid; }
				set { _Sid = value; Track("Sid"); }
			}
			int _Sid;
			[Column("StateName")] public string Statename 
			{ 
				get { return _Statename; }
				set { _Statename = value; Track("StateName"); }
			}
			string _Statename;
		
			public static IEnumerable<DolState> Query(Database db, string[] columns = null, int[] Sid = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.DolState (NOLOCK)");

				if (Sid != null)
					sql.Where("Sid IN (@0)", Sid);

                return db.Query<DolState>(sql);
            }
		}
		
		[TableName("dbo.DolTerminal")]
		[PrimaryKey("Tid")]
		[ExplicitColumns]
		public partial class DolTerminal : DolphinDb.Record<DolTerminal>  
		{
	        [Column] public int Tid 
			{ 
				get { return _Tid; }
				set { _Tid = value; Track("Tid"); }
			}
			int _Tid;
			[Column("CustomerName")] public string Customername 
			{ 
				get { return _Customername; }
				set { _Customername = value; Track("CustomerName"); }
			}
			string _Customername;
			[Column("TerminalId")] public string Terminalid 
			{ 
				get { return _Terminalid; }
				set { _Terminalid = value; Track("TerminalId"); }
			}
			string _Terminalid;
			[Column("TSNum")] public string Tsnum 
			{ 
				get { return _Tsnum; }
				set { _Tsnum = value; Track("TSNum"); }
			}
			string _Tsnum;
			[Column("TerminalRef")] public string Terminalref 
			{ 
				get { return _Terminalref; }
				set { _Terminalref = value; Track("TerminalRef"); }
			}
			string _Terminalref;
			[Column("BrandName")] public string Brandname 
			{ 
				get { return _Brandname; }
				set { _Brandname = value; Track("BrandName"); }
			}
			string _Brandname;
			[Column("TLocation")] public string Tlocation 
			{ 
				get { return _Tlocation; }
				set { _Tlocation = value; Track("TLocation"); }
			}
			string _Tlocation;
			[Column("TState")] public string Tstate 
			{ 
				get { return _Tstate; }
				set { _Tstate = value; Track("TState"); }
			}
			string _Tstate;
			[Column("TAlias")] public string Talias 
			{ 
				get { return _Talias; }
				set { _Talias = value; Track("TAlias"); }
			}
			string _Talias;
			[Column("RegionName")] public string Regionname 
			{ 
				get { return _Regionname; }
				set { _Regionname = value; Track("RegionName"); }
			}
			string _Regionname;
			[Column("TEng")] public string Teng 
			{ 
				get { return _Teng; }
				set { _Teng = value; Track("TEng"); }
			}
			string _Teng;
			[Column("TerminalStatus")] public bool? Terminalstatus 
			{ 
				get { return _Terminalstatus; }
				set { _Terminalstatus = value; Track("TerminalStatus"); }
			}
			bool? _Terminalstatus;
			[Column("CreatedBy")] public string Createdby 
			{ 
				get { return _Createdby; }
				set { _Createdby = value; Track("CreatedBy"); }
			}
			string _Createdby;
			[Column("CreatedOn")] public DateTime? Createdon 
			{ 
				get { return _Createdon; }
				set { _Createdon = value; Track("CreatedOn"); }
			}
			DateTime? _Createdon;
			[Column("ModifiedBy")] public string Modifiedby 
			{ 
				get { return _Modifiedby; }
				set { _Modifiedby = value; Track("ModifiedBy"); }
			}
			string _Modifiedby;
			[Column("ModifiedOn")] public DateTime? Modifiedon 
			{ 
				get { return _Modifiedon; }
				set { _Modifiedon = value; Track("ModifiedOn"); }
			}
			DateTime? _Modifiedon;
		
			public static IEnumerable<DolTerminal> Query(Database db, string[] columns = null, int[] Tid = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.DolTerminal (NOLOCK)");

				if (Tid != null)
					sql.Where("Tid IN (@0)", Tid);

                return db.Query<DolTerminal>(sql);
            }
		}
}
